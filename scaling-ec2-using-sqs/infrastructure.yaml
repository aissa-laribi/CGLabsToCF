AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Lab: Scaling EC2 Using SQS. This template provisions a VPC with one public subnet, a bastion host, and an autoscaling group.

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  LabEnvironment:
    Description: Lab environment
    Default: true
    Type: String
    AllowedValues: [true, false]

Conditions:
  LabEnvironment: !Equals [!Ref LabEnvironment, true]

Resources:
  MessagesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Messages

  #############################################################################
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Public

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  #############################################################################
  # Bastion Host

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If [LabEnvironment, 'ami-096e189c66c11b2b5', !Ref LatestAmiId]
      InstanceType: t3a.small
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "WaitHandle '${WaitHandle}'"
          yum install python3 -y
          python3 -m pip install boto3
          if [[ '${LabEnvironment}' == 'true' ]]; then
            echo ']8CAKA3f' | passwd cloud_user --stdin
            USERNAME=cloud_user
          else
            echo 'P@ssw0rd' | passwd ec2-user --stdin
            sed -i 's|[#]*PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
            systemctl restart sshd.service
            USERNAME=ec2-user
          fi
          su - $USERNAME -c 'aws configure set region us-east-1'
          curl -o /home/$USERNAME/send_messages.py -L https://raw.githubusercontent.com/ACloudGuru-Resources/Course-Certified-Solutions-Architect-Associate/master/labs/scaling-ec2-using-sqs/send_messages.py
          chmod +x /home/$USERNAME/send_messages.py
          chown $USERNAME /home/$USERNAME/send_messages.py
          /opt/aws/bin/cfn-signal -e $? -r "Install complete" '${WaitHandle}'
      Tags:
        - Key: Name
          Value: Bastion Host

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: EC2Instance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '300' # Wait up to 5 mins

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Instance SG'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: 'tcp'
          ToPort: 22

  #############################################################################
  # Autoscaling Group

  AutoScalingTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub 'AutoScalingTopic-${AWS::StackName}'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: MessagesQueue
    Properties:
      ImageId: !If [LabEnvironment, 'ami-096e189c66c11b2b5', !Ref LatestAmiId]
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: t3a.small
      LaunchConfigurationName: LaunchConfiguration
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install python3 -y
          python3 -m pip install boto3
          if [[ '${LabEnvironment}' == 'true' ]]; then
            echo ']8CAKA3f' | passwd cloud_user --stdin
            USERNAME=cloud_user
          else
            echo 'P@ssw0rd' | passwd ec2-user --stdin
            sed -i 's|[#]*PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
            systemctl restart sshd.service
            USERNAME=ec2-user
          fi
          su - $USERNAME -c 'aws configure set region us-east-1'
          curl -o  /home/$USERNAME/receive_messages.py -L https://raw.githubusercontent.com/ACloudGuru-Resources/Course-Certified-Solutions-Architect-Associate/master/labs/scaling-ec2-using-sqs/receive_messages.py
          chmod +x /home/$USERNAME/receive_messages.py
          chown $USERNAME /home/$USERNAME/receive_messages.py
          USERNAME=$USERNAME su $USERNAME -c "/home/${!USERNAME}/receive_messages.py >> /home/${!USERNAME}/receive_messages.log 2>&1 &"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EC2Instance
      - InstanceSecurityGroup
    Properties:
      AutoScalingGroupName: EC2 Autoscaling Group
      DesiredCapacity: '1'
      LaunchConfigurationName: LaunchConfiguration
      MaxSize: '4'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: AutoScaling Group
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref PublicSubnet

Outputs:
  pubIpAddress1:
    Description: Bastion Host Public IP
    Value: !GetAtt EC2Instance.PublicIp

