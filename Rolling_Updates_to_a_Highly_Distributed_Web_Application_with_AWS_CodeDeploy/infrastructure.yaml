AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Public1:
      CIDR: 10.0.1.0/24
    Public2:
      CIDR: 10.0.2.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
  PublicSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public1
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      LoadBalancerName: la-lab
      SecurityGroups:
        - !GetAtt 
          - EC2SecurityGroup
          - GroupId
      Tags:
        - Key: Name
          Value: la-elb
      Subnets:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  ASGLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      IamInstanceProfile: !Ref Ec2InstanceProfile
      LaunchConfigurationName: !Join 
        - ''
        - - la-lab-lc-
          - !Ref 'AWS::StackName'
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash -xe

          exec > >(tee /var/log/user-data.log|logger -t user-data -s
          2>/dev/console) 2>&1

          yum -y update

          yum install -y ruby

          cd /home/ec2-user

          curl -O
          https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install

          chmod +x ./install

          ./install auto
  ASGAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Join 
        - ''
        - - la-scale-asg-
          - !Ref 'AWS::StackName'
      AvailabilityZones:
        - !Select 
          - 0
          - !GetAZs ''
        - !Select 
          - 1
          - !GetAZs ''
        - !Select 
          - 2
          - !GetAZs ''
      Cooldown: '300'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 60
      LaunchConfigurationName: !Ref ASGLaunchConfiguration
      MaxSize: '2'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: la-demo-server
          PropagateAtLaunch: true
      LoadBalancerNames:
        - !Ref LoadBalancer
      VPCZoneIdentifier:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Test group created by LA CloudFormation template
      GroupName: !Join 
        - ''
        - - la-lab-asg-
          - !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - la-lab-asg-
              - !Ref 'AWS::StackName'
      VpcId: !Ref VPC
  CodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Ec2InstanceRole

