AWSTemplateFormatVersion: 2010-09-09
Description: Deploying an Amazon RDS Multi-AZ and Read Replica
Parameters:
  RDSUsername:
    Description: The master user name for the DB instance.
    Type: String
    Default: wpuser
  RDSPassword:
    Description: The master password for the DB instance.
    Type: String
    Default: Password1
    NoEcho: true
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.99.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  DMZ1public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.99.1.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ1public
  DMZ2public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: 10.99.2.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ2public
  AppLayer1private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.99.11.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer1private
  AppLayer2private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: 10.99.12.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer2private
  DBLayer1private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.99.21.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBLayer1private
  DBLayer2private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: 10.99.22.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBLayer2Private
  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NATElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATElasticIP
        - AllocationId
      SubnetId: !Ref DMZ2public
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRT
  RouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationD:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationE:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationF:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBLayer2private
      RouteTableId: !Ref PrivateRT
  DMZNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZNACL
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      NetworkAclId: !Ref DMZNACL
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      NetworkAclId: !Ref DMZNACL
  DMZNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 120
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 130
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 120
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 130
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  AppNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppNACL
  SubnetNetworkAclAssociationC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      NetworkAclId: !Ref AppNACL
  SubnetNetworkAclAssociationD:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      NetworkAclId: !Ref AppNACL
  AppNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: false
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      Egress: false
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 120
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      Egress: false
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 130
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 120
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 130
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: true
      CidrBlock: 10.99.0.0/16
  DBNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBNACL
  SubnetNetworkAclAssociationE:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DBLayer1private
      NetworkAclId: !Ref DBNACL
  SubnetNetworkAclAssociationF:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DBLayer2private
      NetworkAclId: !Ref DBNACL
  DBNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 3306
        To: 3306
      RuleAction: allow
      Egress: false
      CidrBlock: 10.99.0.0/16
  DBNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  DBNACLEntryEgress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 3306
        To: 3306
      RuleAction: allow
      Egress: true
      CidrBlock: 10.99.0.0/16
  DBNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      Egress: true
      CidrBlock: 10.99.0.0/16
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref DMZ1public
        - !Ref DMZ2public
      Name: load-balancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      IpAddressType: ipv4
    DependsOn: VPCGatewayAttachment
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /readme.html
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Name: TG1
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  StudentEC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
  StudentEC2InstancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:*'
              - 'events:*'
              - 'ec2:*'
              - 'rds:*'
              - 's3:*'
              - 'elasticloadbalancing:*'
              - 'autoscaling:*'
              - 'sns:*'
              - 'route53domains:*'
              - 'route53:*'
            Resource: '*'
      PolicyName: StudentEC2InstancePolicy
      Roles:
        - !Ref StudentEC2InstanceRole
  WebInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref StudentEC2InstanceRole
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: wordpress-bastion
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: BastionSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: wordpress-elb
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LoadBalancerSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: wordpress-ec2
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSG
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 80
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: wordpress-rds
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DatabaseSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - !Ref DBLayer1private
        - !Ref DBLayer2private
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: wordpress
      Engine: MySQL
      DBName: wordpress
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      VPCSecurityGroups:
        - !GetAtt 
          - DatabaseSecurityGroup
          - GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      StorageType: gp2
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: ami-096e189c66c11b2b5
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebInstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      AssociatePublicIpAddress: false
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash -xe

          yum update -y

          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2

          yum install -y httpd mariadb-server        

          systemctl start mariadb

          systemctl enable mariadb

          usermod -a -G apache cloud_user

          chown -R cloud_user:apache /var/www

          cd /var/www/html

          wget https://wordpress.org/latest.tar.gz

          tar -xzf latest.tar.gz

          cp -r wordpress/* /var/www/html/

          rm -rf wordpress

          rm -rf latest.tar.gz

          chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {}
          \;

          find /var/www -type f -exec sudo chmod 0664 {} \;

          cp wp-config-sample.php wp-config.php

          sed -i "s/database_name_here/wordpress"/g wp-config.php

          sed -i "s/username_here/${RDSUsername}/g" wp-config.php

          sed -i "s/password_here/${RDSPassword}/g" wp-config.php

          sed -i "s/localhost/db.mydomain.local/g" wp-config.php

          echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php

          systemctl start httpd

          systemctl enable httpd
      InstanceMonitoring: true
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      Cooldown: '300'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref AppLayer1private
        - !Ref AppLayer2private
      Tags:
        - PropagateAtLaunch: true
          Value: instance-wordpress
          Key: Name
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: DBInstance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-096e189c66c11b2b5
      IamInstanceProfile: !Ref WebInstanceProfile
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash -xe

          echo 'f2Rz^!Q]' | passwd cloud_user --stdin

          yum update -y

          aws configure set region us-east-1

          su - cloud_user -c 'aws configure set region
          us-east-1'                    

          while true ; do          
            HTTP_CODE=$(curl -d "weblog_title=Wordpress&user_name=${RDSUsername}&admin_password=${RDSPassword}&admin_password2=${RDSPassword}&admin_email=noreply@example.com&pw_weak=on&blog_public=0" Li -o /dev/null -s -w "%{http_code}" http://${LoadBalancer.DNSName}/wp-admin/install.php?step=2)
            if [ $HTTP_CODE -eq 200 ]; then
              break
            fi
            printf 'Waiting for Wordpress to return HTTP 200...'
            sleep 5
          done
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref DMZ1public
      Tags:
        - Value: bastion-host
          Key: Name
  RDSHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: My private zone for RDS
      Name: mydomain.local
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
  RDSRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref RDSHostedZone
      Name: db.mydomain.local
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt 
          - DBInstance
          - Endpoint
          - Address
Outputs:
  pubIpAddress1:
    Description: Bastion Host Public IP
    Value: !GetAtt 
      - BastionInstance
      - PublicIp
  privIpAddress1:
    Description: Bastion Host Private IP of bastion instance
    Value: !GetAtt 
      - BastionInstance
      - PrivateIp
  pubIpAddress2:
    Description: RDS Endpoint Address
    Value: !GetAtt 
      - DBInstance
      - Endpoint
      - Address

